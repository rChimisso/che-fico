Index: app/src/main/java/com/kreinto/chefico/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kreinto.chefico\r\n\r\nimport android.Manifest.permission.*\r\nimport android.app.Activity\r\nimport android.content.Context\r\nimport android.content.ContextWrapper\r\nimport android.content.pm.PackageManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.result.ActivityResultCallback\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.activity.viewModels\r\nimport androidx.camera.core.ExperimentalGetImage\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.material.ExperimentalMaterialApi\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.compose.ExperimentalLifecycleComposeApi\r\nimport androidx.navigation.NavHostController\r\nimport androidx.navigation.NavType\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.rememberNavController\r\nimport androidx.navigation.navArgument\r\nimport com.google.accompanist.pager.ExperimentalPagerApi\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.kreinto.chefico.room.CheFicoViewModel\r\nimport com.kreinto.chefico.ui.theme.CheFicoTheme\r\nimport com.kreinto.chefico.views.camera.CameraView\r\nimport com.kreinto.chefico.views.dashboard.DashboardView\r\nimport com.kreinto.chefico.views.maps.MapsView\r\nimport com.kreinto.chefico.views.plantdetail.PlantDetailView\r\nimport com.kreinto.chefico.views.poicreation.PoiCreationView\r\nimport com.kreinto.chefico.views.poidetail.PoiDetailView\r\nimport com.kreinto.chefico.views.poilist.PoiListView\r\nimport com.kreinto.chefico.views.settings.SettinsView\r\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\r\n\r\n@ExperimentalLifecycleComposeApi\r\n@ExperimentalCoroutinesApi\r\n@ExperimentalFoundationApi\r\n@ExperimentalMaterial3Api\r\n@ExperimentalMaterialApi\r\n@ExperimentalPagerApi\r\n@ExperimentalGetImage\r\nclass MainActivity : ComponentActivity() {\r\n  private lateinit var navController: NavHostController\r\n\r\n  /**\r\n   * If the app is lacking the specified permission, requests it.\r\n   *\r\n   * @param permission permission to request.\r\n   * @param launcher [ActivityResultLauncher] to execute on the user decision.\r\n   */\r\n  private fun requestPermission(permission: String, launcher: ActivityResultLauncher<String>) {\r\n    if (ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_DENIED) {\r\n      if (ActivityCompat.shouldShowRequestPermissionRationale(this, permission)) {\r\n        // In an educational UI, explain to the user why your app requires this\r\n        // permission for a specific feature to behave as expected, and what\r\n        // features are disabled if it's declined. In this UI, include a\r\n        // \"cancel\" or \"no thanks\" button that lets the user continue\r\n        // using your app without granting the permission.\r\n        // showInContextUI(...)\r\n      } else {\r\n        launcher.launch(permission)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an [ActivityResultLauncher] for permission requests.\r\n   *\r\n   * @param callback [ActivityResultCallback] to launch when the user choose whether to grant the permission.\r\n   * @return [ActivityResultLauncher] for permission requests.\r\n   */\r\n  private fun getPermissionLauncher(callback: ActivityResultCallback<Boolean>): ActivityResultLauncher<String> {\r\n    return registerForActivityResult(ActivityResultContracts.RequestPermission(), callback)\r\n  }\r\n\r\n  /**\r\n   * Returns an [ActivityResultLauncher] for permission requests that navigates to the given [Route] if the user grants the permission.\r\n   *\r\n   * @param route [Route] to navigate to if the user grants the permission.\r\n   * @return [ActivityResultLauncher] for permission requests.\r\n   */\r\n  private fun getPermissionLauncher(route: Route): ActivityResultLauncher<String> {\r\n    return getPermissionLauncher {\r\n      if (it) {\r\n        navController.navigate(route.path)\r\n      } else {\r\n        // Explain to the user that the feature is unavailable because the\r\n        // feature requires a permission that the user has denied. At the\r\n        // same time, respect the user's decision. Don't link to system\r\n        // settings in an effort to convince the user to change their\r\n        // decision.\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a list of [navArguments][androidx.navigation.navArgument] for the given [Route].\r\n   *\r\n   * @param route\r\n   * @return list of [navArguments][androidx.navigation.navArgument].\r\n   */\r\n  private fun getNavArgs(route: Route) =\r\n    listOf(navArgument(route.arg) { type = NavType.StringType })\r\n\r\n  override fun onCreate(savedInstanceState: Bundle?) {\r\n    super.onCreate(savedInstanceState)\r\n    val requestLocationPermissionLauncher = getPermissionLauncher(Route.Maps)\r\n    val requestCameraPermissionLauncher = getPermissionLauncher(Route.Camera)\r\n    val requestNotificationPermissionLauncher = getPermissionLauncher {\r\n      if (!it) {\r\n        // Explain to the user that the feature is unavailable because the\r\n        // feature requires a permission that the user has denied. At the\r\n        // same time, respect the user's decision. Don't link to system\r\n        // settings in an effort to convince the user to change their\r\n        // decision.\r\n      }\r\n    }\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n      requestPermission(POST_NOTIFICATIONS, requestNotificationPermissionLauncher)\r\n    }\r\n\r\n    setContent {\r\n      CheFicoTheme {\r\n        val context = LocalContext.current\r\n        navController = rememberNavController()\r\n        val viewModel by viewModels<CheFicoViewModel>()\r\n        val onNavigate: (String) -> Unit = {\r\n          when (it) {\r\n            Route.Back.path -> {\r\n              navController.popBackStack()\r\n              if (navController.currentDestination?.route == Route.PlantDetail.path) {\r\n                navController.popBackStack()\r\n              }\r\n            }\r\n            Route.Maps.path -> {\r\n              requestPermission(ACCESS_FINE_LOCATION, requestLocationPermissionLauncher)\r\n            }\r\n            Route.Camera.path -> {\r\n              requestPermission(CAMERA, requestCameraPermissionLauncher)\r\n            }\r\n            else -> navController.navigate(it)\r\n          }\r\n        }\r\n\r\n        LaunchedEffect(Unit) {\r\n          PoiNotificationManager.createNotificationChannel(context)\r\n        }\r\n\r\n        NavHost(navController, startDestination = Route.Dashboard.path) {\r\n          composable(Route.Dashboard.path) { DashboardView(onNavigate) }\r\n          composable(Route.Maps.path) {\r\n            MapsView(\r\n              onNavigate,\r\n              viewModel,\r\n              fusedLocationClient = LocationServices.getFusedLocationProviderClient(this@MainActivity),\r\n              locationSettingsClient = LocationServices.getSettingsClient(this@MainActivity)\r\n            )\r\n          }\r\n          composable(Route.Settings.path) { SettinsView(onNavigate) }\r\n          composable(Route.PoiList.path) { PoiListView(onNavigate, viewModel) }\r\n          composable(Route.PoiDetail.path, getNavArgs(Route.PoiDetail)) {\r\n            PoiDetailView(\r\n              onNavigate,\r\n              viewModel,\r\n              poiId = it.arguments?.getString(Route.PoiDetail.arg)\r\n            )\r\n          }\r\n          composable(Route.Camera.path) { CameraView(onNavigate) }\r\n          composable(Route.PoiCreation.path) { PoiCreationView(onNavigate) }\r\n          composable(Route.PlantDetail.path, getNavArgs(Route.PlantDetail)) {\r\n            PlantDetailView(onNavigate, imageName = it.arguments?.getString(Route.PlantDetail.arg))\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfun Context.getActivity(): Activity = when (this) {\r\n  is Activity -> this\r\n  is ContextWrapper -> baseContext.getActivity()\r\n  else -> throw IllegalStateException(\"Permissions should be called in the context of an Activity\")\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/kreinto/chefico/MainActivity.kt b/app/src/main/java/com/kreinto/chefico/MainActivity.kt
--- a/app/src/main/java/com/kreinto/chefico/MainActivity.kt	(revision 0ec413afb3775613f71b08665d0c0b985028b40c)
+++ b/app/src/main/java/com/kreinto/chefico/MainActivity.kt	(date 1678269144905)
@@ -1,9 +1,6 @@
 package com.kreinto.chefico
 
 import android.Manifest.permission.*
-import android.app.Activity
-import android.content.Context
-import android.content.ContextWrapper
 import android.content.pm.PackageManager
 import android.os.Build
 import android.os.Bundle
@@ -184,10 +181,4 @@
       }
     }
   }
-}
-
-fun Context.getActivity(): Activity = when (this) {
-  is Activity -> this
-  is ContextWrapper -> baseContext.getActivity()
-  else -> throw IllegalStateException("Permissions should be called in the context of an Activity")
-}
+}
\ No newline at end of file
